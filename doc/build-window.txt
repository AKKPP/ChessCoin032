Windows

1. Prepare your build system

1.1 Check build dependencies

openssl version check
>openssl version

perl version check
>perl -v

Qt version Check
>qmake --version


1.2 Install Perl, Python

You can latest download versions from internet.
Install with defaults.

1.3 Install QT5.9.2

https://download.qt.io/archive/qt/5.9/5.9.2/qt-opensource-windows-x86-5.9.2.exe

Setting up QT 5.9.2 kit to QT Creator (this step is automatic installed by qt installer 5.9.2) 
- Open QT Creator
->> Menu "Tools"\"Options\Build & Run"
->> Check tab Compilers where mingw32-gcc and mingw32-g++ are auto detected. If not, please add it by manual
             C={QTDIR}\Tools\mingw53_32\bin\gcc
			 C++={QTDIR}\Tools\mingw53_32\bin\g++
->> Check tab Qt Version
             If Qt 5.9.2 does not exist in this tab, please Add it from {QTDIR}\mingw53_32\bin\qmake.exe

->> Check tab Kits, Add new kit if it is not exist kit Qt 5.9.2
             Name: QT 5.9.2 <any name do you want>
			 Complilers: Config C and C++ as following the complilers that you setup above.
			 Debugger: Mingw32 ({QTDIT}\Tools\mingw53_32\bin\gdb.exe)
			 Qt Version: Select Qt 5.9.2 as setting Qt Version above.

1.4 Set system PATH environment variable

{QTDIR}\Tools\mingw53_32\bin. Ensure C:\mingw32\bin is removed from path. Or must copy {QTDIR}\Tools\mingw53_32\bin to replace C:\mingw32\bin

Ensure that MSYS, Perl and Python bin folders are set in your PATH environment variable. On Windows 10, your path should look something like:

for example:
{QTDIR}\Tools\mingw530_32\bin;C:\Python37;C:\Perl\site\bin;C:\Perl\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\ ...

1.5 Additional checks

You can check gcc on your local machine.
Your gcc -v output should be:

$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=D:/ProgramFiles/Qt/Qt5.9.2/Tools/mingw530_32/bin/../libexec/gcc/i686-w64-mingw32/5.3.0/lto-wrapper.exe
Target: i686-w64-mingw32
Configured with: ../../../src/gcc-5.3.0/configure --host=i686-w64-mingw32 --build=i686-w64-mingw32 --target=i686-w64-mingw32 --prefix=/mingw32 --with-sysroot=/c/mingw530/i686-530-posix-dwarf-rt_v4-rev0/mingw32 --with-gxx-include-dir=/mingw32/i686-w64-mingw32/include/c++ --enable-shared --enable-static --disable-multilib --enable-languages=c,c++,fortran,lto --enable-libstdcxx-time=yes --enable-threads=posix --enable-libgomp --enable-libatomic --enable-lto --enable-graphite --enable-checking=release --enable-fully-dynamic-string --enable-version-specific-runtime-libs --disable-sjlj-exceptions --with-dwarf2 --disable-isl-version-check --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-bootstrap --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-gnu-as --with-gnu-ld --with-arch=i686 --with-tune=generic --with-libiconv --with-system-zlib --with-gmp=/c/mingw530/prerequisites/i686-w64-mingw32-static --with-mpfr=/c/mingw530/prerequisites/i686-w64-mingw32-static --with-mpc=/c/mingw530/prerequisites/i686-w64-mingw32-static --with-isl=/c/mingw530/prerequisites/i686-w64-mingw32-static --with-pkgversion='i686-posix-dwarf-rev0, Built by MinGW-W64 project' --with-bugurl=http://sourceforge.net/projects/mingw-w64 CFLAGS='-O2 -pipe -I/c/mingw530/i686-530-posix-dwarf-rt_v4-rev0/mingw32/opt/include -I/c/mingw530/prerequisites/i686-zlib-static/include -I/c/mingw530/prerequisites/i686-w64-mingw32-static/include' CXXFLAGS='-O2 -pipe -I/c/mingw530/i686-530-posix-dwarf-rt_v4-rev0/mingw32/opt/include -I/c/mingw530/prerequisites/i686-zlib-static/include -I/c/mingw530/prerequisites/i686-w64-mingw32-static/include' CPPFLAGS= LDFLAGS='-pipe -L/c/mingw530/i686-530-posix-dwarf-rt_v4-rev0/mingw32/opt/lib -L/c/mingw530/prerequisites/i686-zlib-static/lib -L/c/mingw530/prerequisites/i686-w64-mingw32-static/lib -Wl,--large-address-aware'
Thread model: posix
gcc version 5.3.0 (i686-posix-dwarf-rev0, Built by MinGW-W64 project)

2. Download, unpack and build required 3rd-party dependencies

Project folder tree overview:

./ChessCoin-qt 
  --ChessCoin-qt.pro
  --src
  -----leveldb
  --3party
  -----openssl1.1.1l (OpenSSL 1.1.1l 24 Aug 2021)
  -----db-6.0.20
  -----boost_1.77.0
  -----libpng-1.6.37
  -----qrencode-4.1.1
  -----miniupnpc-2.2.3


Perl Linux 
sh <(curl -q https://platform.activestate.com/dl/cli/pdli01/install.sh) --activate-default OleksandrAAA/Perl-5.32

2.1 OpenSSL

OpenSSL 1.1.1l 24 Aug 2021
https://ftp.openssl.org/source/openssl-1.1.1l.tar.gz

$cd /{your 3rd-party path}
$tar zxvf openssl-1.1.1l.tar.gz
$cd openssl-1.1.1l
$./Configure mingw
$make

or you can run as follows:
$./Configure no-zlib no-shared no-dso no-krb5 no-camellia no-capieng no-cast no-cms no-dtls1 no-gost no-gmp no-heartbeats no-idea no-jpake no-md2 no-mdc2 no-rc5 no-rdrand no-rfc3779 no-rsax no-sctp no-seed no-sha0 no-static_engine no-whirlpool no-rc2 no-rc4 no-ssl2 no-ssl3 mingw
$make

error: 'ERROR_ALREADY_EXISTS' undeclared
mingw-get upgrade "w32api<5.0.2"

2.2 Berkeley DB

https://www.linuxfromscratch.org/blfs/view/7.5/server/db.html

$cd /{your 3rd-party path}
$tar xvfz db-6.0.20.tar.gz 
$cd db-6.0.20/build_windows
$../dist/configure --disable-replication --enable-mingw --enable-cxx
$make

2.3 Boost

https://www.boost.org/users/history/version_1_77_0.html
https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.gz (Unix)
https://boostorg.jfrog.io/native/main/release/1.77.0/source/boost_1_77_0.tar.gz	(Unix)
https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.zip (Windows)
https://boostorg.jfrog.io/native/main/release/1.77.0/source/boost_1_77_0.zip 	(Windows)

Download either the zip or the 7z archive, unpack Boost to {your 3rd-party path}:, rename, then bootstrap and compile from a Windows command prompt:

>cd {your 3rd-party path}
>bootstrap.bat mingw
>b2 --build-type=complete --with-chrono --with-filesystem --with-program_options --with-system --with-thread toolset=gcc cxxflags="-std=gnu++11" link=static threading=multi runtime-link=static stage


This will compile the required Boost libraries and put them into the stage folder ({your 3rd-party path}\boost_1_57_0\stage). 
Note: make sure you don't use tarballs, as unix EOL markers can break batch files.

2.4 Miniupnpc

Download http://miniupnp.free.fr/files/download.php?file=miniupnpc-2.2.3.tar.gz  and unpack to {your 3rd-party path}:, then from a Windows command prompt:

>cd miniupnpc-2.2.3
>make -f Makefile.mingw CC=mingw32-gcc AR=mingw32-ar


2.5 libpng

http://www.libpng.org/pub/png/libpng.html

tar xvfz libpng-1.6.37.tar.gz
cd libpng-1.6.37
./configure --disable-shared
make
cp .libs/libpng16.a .libs/libpng.a

2.6 qrencode-4.1.1

tar xvfz qrencode-4.1.1.tar.gz
cd qrencode-4.1.1
LIBS="../libpng-1.6.37/.libs/libpng.a D:/ProgramFiles/Qt/Qt5.9.2/Tools/mingw530_32/i686-w64-mingw32/lib/libz.a" \
png_CFLAGS="-I../libpng-1.6.37" \
png_LIBS="-L../libpng-1.6.37/.libs" \
configure 
make

3. Compile chesscoin-qt.exe with Qt 5.9.2

3.1 Edit chesscoin-qt.pro

With a text editor, edit INCLUDEPATHS, LIBPATHS, and LIBS in your prject .pro according to your dependency versions and locations:

# Dependency library locations can be customized with:
#    BOOST_INCLUDE_PATH, BOOST_LIB_PATH, BDB_INCLUDE_PATH,
#    BDB_LIB_PATH, OPENSSL_INCLUDE_PATH and OPENSSL_LIB_PATH respectively

BOOST_LIB_SUFFIX=-mgw5-mt-s-x32-1_77
BOOST_INCLUDE_PATH=D:/ChessCoinLibs/boost_1_77_0
BOOST_LIB_PATH=D:/ChessCoinLibs/boost_1_77_0/stage/lib

BDB_INCLUDE_PATH=D:/ChessCoinLibs/db-6.0.20/build_windows
BDB_LIB_PATH=D:/ChessCoinLibs/db-6.0.20/build_windows

OPENSSL_INCLUDE_PATH=D:/ChessCoinLibs/openssl-1.1.1l/include
OPENSSL_LIB_PATH=D:/ChessCoinLibs/openssl-1.1.1l

QRENCODE_INCLUDE_PATH=D:/ChessCoinLibs/qrencode-4.1.1
QRENCODE_LIB_PATH=D:/ChessCoinLibs/qrencode-4.1.1/.libs

QRDECODE_INCLUDE_PATH=D:/ChessCoinLibs/qzxing
QRDECODE_LIB_PATH=D:/ChessCoinLibs/qzxing/lib

LIBS += -lssl -lcrypto -ldb_cxx
LIBS += -lboost_system-mgw5-mt-s-x32-1_77 -lboost_filesystem-mgw5-mt-s-x32-1_77 -lboost_program_options-mgw5-mt-s-x32-1_77 -lboost_thread-mgw5-mt-s-x32-1_77 libboost_chrono-mgw5-mt-s-x32-1_77

and...

contains(USE_UPNP, 1) {
 message(Building with miniupnpc support)
 INCLUDEPATHS += -I"C:/ChessCoinLibs/miniupnpc-2.2.3"
 MINIUPNPC_LIB_PATH=C:/ChessCoinLibs/miniupnpc-2.2.3
 LIBS += $$join(MINIUPNPC_LIB_PATH,,-L,) -lminiupnpc
 win32:LIBS += -liphlpapi
 DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)
}

Upnp support is disabled by default. If you want to compile with UPNP support set:
	USE_UPNP:=1
	
3.2 Compile leveldb	

$cd {project}/src/leveldb
$TARGET_OS=NATIVE_WINDOWS make libleveldb.a libmemenv.a

3.3 Compile with Qt IDE

You open chesscoin-qt.pro file at Qtcreator and build project from IDE.

3.4 Windows Deploy

For example, ChessCoin-qt.exe is in D:\BuildOuput\RUN
>cd D:\BuildOuput\RUN
>{QTDIR}\mingw53_32\bin\windeployqt.exe chesscoin -qt.exe


