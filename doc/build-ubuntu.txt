Ubuntu

1. Prepare your build system

1.1 Check build dependencies

openssl version check
$openssl version

perl version check
$perl -v

Qt version Check
$qmake --version

boost version check
$whereis boost
$cat /usr/include/boost/version.hpp | grep "BOOST_LIB_VERSION"

You can latest download versions from internet.
Install with defaults.

1.2 Install QT5.9.2

https://download.qt.io/archive/qt/5.9/5.9.2/qt-opensource-linux-x64-5.9.2.run
You download Qt versin and Install with defaults.

2. Download, unpack and build required dependencies

Project folder tree overview:

./ChessCoin-qt
  --ChessCoin-qt.pro
  --src
  -----leveldb
  --3party
  -----openssl1.0.2u (OpenSSL 1.0.2u 20 Dec 2019)
  -----db-6.0.20
  -----boost_1.57.0
  -----libpng-1.6.37
  -----qrencode-4.1.1
  -----miniupnpc-1.9.20150206


2.1 OpenSSL

OpenSSL 1.1.1l 24 Aug 2021
https://ftp.openssl.org/source/openssl-1.1.1l.tar.gz

$cd /{your 3rd-party path}
$tar zxvf openssl-1.1.1l.tar.gz
$cd openssl-1.1.1l
$./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib
$make
$make install 

in case of zlib reequirment
$sudo apt-get install libz-dev

2.2 Berkeley DB

https://www.linuxfromscratch.org/blfs/view/7.5/server/db.html

$cd /{your 3rd-party path}
$tar xvfz db-6.0.20.tar.gz 
$cd db-6.0.20/build_unix
$../dist/configure  --prefix=/usr/local/berkeleydb.6.0.20 --enable-mingw --enable-cxx
or 
$../dist/configure  --prefix=/usr/local/berkeleydb.6.0.20 --enable-cxx --enable-dbm --enable-compat185
$make

cp -rp db-18.1.32/docs/bdb-sql db-18.1.40/docs/
cp -rp db-18.1.32/docs/gsg_db_server db-18.1.40/docs/

2.3 Boost
<= v1.3.1
https://www.boost.org/users/history/version_1_57_0.html

v1.4.1
https://www.boost.org/users/history/version_1_77_0.html
https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.gz (Unix)
https://boostorg.jfrog.io/native/main/release/1.77.0/source/boost_1_77_0.tar.gz	(Unix)

Download either the zip or the 7z archive, unpack Boost to {your 3rd-party path}:, rename, then bootstrap and compile from a Windows command prompt:

$cd {your 3rd-party path}
//////$bootstrap.bat mingw
$./bootstrap
$./b2 --build-type=complete --with-chrono --with-filesystem --with-program_options --with-system --with-thread toolset=gcc cxxflags="-std=gnu++11" link=static threading=multi runtime-link=static stage
or 
$b2 --with-chrono --with-filesystem --with-program_options --with-system --with-thread toolset=gcc cxxflags="-std=gnu++11" link=static threading=multi runtime-link=static stage

=> ubuntu
$b2 install {--prefix=/usr/local/boost.1.77.0}

This will compile the required Boost libraries and put them into the stage folder ({your 3rd-party path}\boost_1_57_0\stage). 
Note: make sure you don't use tarballs, as unix EOL markers can break batch files.

2.4 Miniupnpc

http://miniupnp.free.fr/files/download.php?file=miniupnpc-2.2.3.tar.gz

>cd miniupnpc-2.2.3
>su
>make install

or cmake CMakeList.txt
make install


2.5 libpng

http://www.libpng.org/pub/png/libpng.html

tar xvfz libpng-1.6.37.tar.gz
cd libpng-1.6.37
./configure --disable-shared
make
cp .libs/libpng16.a .libs/libpng.a

2.6 qrencode-4.1.1

tar xvfz qrencode-4.1.1.tar.gz
cd qrencode-4.1.1
LIBS="../libpng-1.6.37/.libs/libpng.a D:/ProgramFiles/Qt/Qt5.9.2/Tools/mingw530_32/i686-w64-mingw32/lib/libz.a" \
png_CFLAGS="-I../libpng-1.6.37" \
png_LIBS="-L../libpng-1.6.37/.libs" \
configure
make


3. Compile chesscoin-qt.exe with Qt 5.9.2

3.1 Edit chesscoin-qt-ubuntu.pro

With a text editor, edit INCLUDEPATHS, LIBPATHS, and LIBS in your prject .pro according to your dependency versions and locations:

# Dependency library locations can be customized with:
#    BOOST_INCLUDE_PATH, BOOST_LIB_PATH, BDB_INCLUDE_PATH,
#    BDB_LIB_PATH, OPENSSL_INCLUDE_PATH and OPENSSL_LIB_PATH respectively

BOOST_LIB_SUFFIX=
BOOST_INCLUDE_PATH=/usr/local/boost.1.77.0/include
BOOST_LIB_PATH=/usr/local/boost.1.77.0/lib

BDB_INCLUDE_PATH=/usr/local/berkeleydb.6.0.20/include
BDB_LIB_PATH=/usr/local/berkeleydb.6.0.20/lib

OPENSSL_INCLUDE_PATH=/usr/local/ssl.1.1.1/include
OPENSSL_LIB_PATH=/usr/local/ssl.1.1.1/lib

QRENCODE_INCLUDE_PATH=/usr/local/include
QRENCODE_LIB_PATH=/usr/local/lib

QRDECODE_INCLUDE_PATH=/usr/local/qzxing
QRDECODE_LIB_PATH=/usr/local/qzxing/lib

and...

contains(USE_UPNP, 1) {
 message(Building with miniupnpc support)
 INCLUDEPATHS += -I"/usr/include/miniupnpc"
 MINIUPNPC_LIB_PATH=/usr/lib
 LIBS += $$join(MINIUPNPC_LIB_PATH,,-L,) -lminiupnpc
 win32:LIBS += -liphlpapi
 DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)
}

Upnp support is disabled by default. If you want to compile with UPNP support set:
	USE_UPNP:=1
	
3.2 Compile leveldb	

$cd {project}/src/leveldb
$TARGET_OS=Linux make libleveldb.a libmemenv.a

3.3 Compile with Qt IDE

You open Qtcreator and build project from IDE.

3.4 Linux Deploy

You can download project for deploy from github.
https://github.com/probonopd/linuxdeployqt

$./linuxdeployqt  chesscoin-qt -always-overwrite -exclude-libs=/usr/local/lib,/usr/local/boost.1.77.0/lib,/usr/local/berkeleydb.6.0.20/lib,/usr/local/ssl/lib,/usr/local/qrencode-4.1.1/lib,/usr/local/qzxing/lib -appimage

wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
./appimagetool-x86_64.AppImage  [deploy dir]

4. Compile chesscoind 

4.1 Project Build
$cd {Project}/src
$make -f makefile.unix
$strip chesscoind

4.2. UPX pack
https://github.com/upx/upx/releases
./upx -9 chesscoind




